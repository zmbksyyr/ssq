name: Shuangseqiu Full Process - Data, Analysis, and Bonus Check

on:
  schedule:
    # UTC时间周日、周二、周四的 22:00，对应北京时间周一、周三、周五的 6:00
    # 在开奖日（周日、周二、周四）的次日凌晨运行，确保能获取到最新开奖数据
    - cron: '0 22 * * 0,2,4'
  workflow_dispatch:

jobs:
  daily_process:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai # 设置时区以确保日志时间一致

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # 获取所有历史记录以进行git操作

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Step 1 - Run data acquisition script to update CSV
      run: python ssq_data_processor.py

    - name: Step 2 - Run analysis script to generate new prediction report
      run: python ssq_analyzer.py

    - name: Step 3 - Run bonus calculation script to check previous report
      run: python ssq_bonus_calculation.py
      
    - name: Step 4 - Clean old files and create fixed-name copies
      id: file_management
      run: |
        # 定义一个可重用的函数来处理文件
        # 参数1: 文件名前缀 (e.g., "ssq_analysis_output")
        # 参数2: 固定文件名 (e.g., "ssq_analysis.txt")
        process_files() {
          local prefix=$1
          local fixed_name=$2
          local keep=3
          echo "--- Processing files with prefix: ${prefix}_*.txt ---"
          
          # 查找所有相关文件并按名称排序（时间戳排序）
          mapfile -t files < <(find . -maxdepth 1 -name "${prefix}_*.txt" -print0 | xargs -0 ls -1 | sort)
          
          local count=${#files[@]}
          echo "Found $count files."
          
          if [ "$count" -eq 0 ]; then
            echo "No files found with this prefix. Skipping."
            return
          fi

          # 1. 复制最新的一个为固定文件名
          latest_file="${files[$((count - 1))]}"
          if [ -f "$latest_file" ]; then
            cp "$latest_file" "$fixed_name"
            echo "Copied latest file '$latest_file' to '$fixed_name'"
          else
            echo "Warning: Latest file '$latest_file' not found for copying."
          fi

          # 2. 清理旧文件，只保留最新的3个
          if [ "$count" -gt "$keep" ]; then
            num_to_delete=$((count - keep))
            echo "Keeping latest $keep files. Deleting $num_to_delete oldest files:"
            for i in $(seq 0 $((num_to_delete - 1))); do
              file_to_delete="${files[$i]}"
              if [ -f "$file_to_delete" ]; then
                echo "Removing: $file_to_delete"
                rm "$file_to_delete"
              fi
            done
          else
            echo "No cleanup needed ($count files found <= $keep)."
          fi
          echo "--- Finished processing for prefix: $prefix ---"
        }

        # 调用函数处理两类报告
        process_files "ssq_analysis_output" "latest_ssq_analysis.txt"
        process_files "ssq_bonus_check" "latest_ssq_calculation.txt"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit updated files
      run: |
        set -e
        echo "--- Staging and Committing Files ---"
        
        # 暂存数据文件、固定文件名的报告
        git add ssq.csv latest_ssq_analysis.txt latest_ssq_calculation.txt
        
        # 暂存所有带时间戳的报告文件（git add会智能处理新增和被删除的文件）
        git add ssq_analysis_output_*.txt ssq_bonus_check_*.txt

        echo "Current git status:"
        git status --porcelain
        
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Auto update: Data, analysis, and bonus check for $(date +'%Y-%m-%d')"
          echo "Changes committed."
        fi
        echo "--- Finished Staging and Committing ---"

    - name: Pull remote changes to sync before push
      run: |
        git config pull.rebase false
        git pull origin ${{ github.ref_name }} --no-edit

    - name: Push changes
      uses: ad-m/github-push-action@v0.8.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref_name }}```
